const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

const categories = [
  {
    name: "Instrumentation Dentaire",
    description: "Instruments dentaires professionnels pour tous types de soins",
    slug: "instrumentation-dentaire",
    icon: "ü¶∑",
    color: "#3B82F6",
    metaTitle: "Instrumentation Dentaire - Dental Camp",
    metaDescription: "D√©couvrez notre gamme compl√®te d'instruments dentaires professionnels",
    displayOrder: 1
  },
  {
    name: "Empreinte Dentaire",
    description: "Mat√©riaux et √©quipements pour prises d'empreintes dentaires",
    slug: "empreinte-dentaire",
    icon: "üìã",
    color: "#10B981",
    metaTitle: "Empreinte Dentaire - Dental Camp",
    metaDescription: "Mat√©riaux de qualit√© pour prises d'empreintes dentaires pr√©cises",
    displayOrder: 2
  },
  {
    name: "Composite & Adh√©sif",
    description: "Composites dentaires et syst√®mes adh√©sifs de haute qualit√©",
    slug: "composite-adhesif",
    icon: "üß™",
    color: "#8B5CF6",
    metaTitle: "Composite & Adh√©sif - Dental Camp",
    metaDescription: "Composites et adh√©sifs dentaires pour restaurations esth√©tiques",
    displayOrder: 3
  },
  {
    name: "Fraises & Polissage Dentaire",
    description: "Fraises dentaires et instruments de polissage professionnels",
    slug: "fraises-polissage-dentaire",
    icon: "‚öôÔ∏è",
    color: "#F59E0B",
    metaTitle: "Fraises & Polissage Dentaire - Dental Camp",
    metaDescription: "Fraises et outils de polissage dentaire de pr√©cision",
    displayOrder: 4
  },
  {
    name: "Scellement & Collage",
    description: "Produits de scellement et mat√©riaux de collage dentaire",
    slug: "scellement-collage",
    icon: "üîó",
    color: "#EF4444",
    metaTitle: "Scellement & Collage - Dental Camp",
    metaDescription: "Solutions de scellement et collage pour soins dentaires",
    displayOrder: 5
  }
]

async function addCategories() {
  try {
    console.log('üèóÔ∏è Starting to add categories...')
    
    for (const category of categories) {
      console.log(`üìÇ Adding category: ${category.name}`)
      
      const existingCategory = await prisma.category.findUnique({
        where: { slug: category.slug }
      })
      
      if (existingCategory) {
        console.log(`‚ö†Ô∏è Category ${category.name} already exists, updating...`)
        await prisma.category.update({
          where: { slug: category.slug },
          data: category
        })
      } else {
        await prisma.category.create({
          data: category
        })
        console.log(`‚úÖ Category ${category.name} created successfully`)
      }
    }
    
    console.log('üéâ All categories added successfully!')
    
    // Display all categories
    const allCategories = await prisma.category.findMany({
      orderBy: { displayOrder: 'asc' }
    })
    
    console.log('\nüìã Current categories in database:')
    allCategories.forEach((cat, index) => {
      console.log(`${index + 1}. ${cat.name} (${cat.slug})`)
    })
    
  } catch (error) {
    console.error('‚ùå Error adding categories:', error)
  } finally {
    await prisma.$disconnect()
  }
}

addCategories()
